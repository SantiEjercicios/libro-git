DROP DATABASE IF EXISTS SIMULACRO3;
CREATE DATABASE SIMULACRO3;
USE SIMULACRO3;


/*ejercicio1*/
DROP PROCEDURE IF EXISTS CALCULARCUBO;
DELIMITER $$
CREATE PROCEDURE CALCULARCUBO(IN ENTRADA INT)
BEGIN
    DECLARE RESULTADO INT;
    SET RESULTADO = ENTRADA * ENTRADA * ENTRADA;
    SELECT RESULTADO;
END$$
DELIMITER ;
CALL CALCULARCUBO(2);


/*ejercicio2*/


DROP TABLE IF EXISTS SUPERMERCADO;

CREATE TABLE SUPERMERCADO(

CODIGO INT PRIMARY KEY,
NOMBRE_PROVEDOR VARCHAR(50)

);

DROP PROCEDURE IF EXISTS SUPERMERCADO1;

DELIMITER $$

CREATE PROCEDURE SUPERMERCADO1(IN CODIGO INT, IN NOMBRE VARCHAR(50))
BEGIN

INSERT INTO SUPERMERCADO VALUES(CODIGO,NOMBRE);

END$$
DELIMITER ;

CALL SUPERMERCADO1(5,"AMIRI");

SELECT * FROM SUPERMERCADO;



/*ejercicio3*/

DROP TABLE IF EXISTS PERSONAL;
CREATE TABLE PERSONAL(

CODIGO INT,
NOMBRE CHAR(35),
APELLIDO CHAR(50),
TELEFONO CHAR(9),
DNI CHAR(9)
);
INSERT INTO PERSONAL VALUES(1,"ASIER","CHICHARRO","655057778","47550459Y");
INSERT INTO PERSONAL VALUES(2,"ASIER","CHICHARRO","655057778","47550459Y");
INSERT INTO PERSONAL VALUES(3,"ASIER","CHICHARRO","655057778","47550459Y");
INSERT INTO PERSONAL VALUES(4,"ASIER","CHICHARRO","655057778","47550459Y");
INSERT INTO PERSONAL VALUES(5,"ASIER","CHICHARRO","655057778","47550459Y");
DROP PROCEDURE IF EXISTS VERPERSONAL;
DELIMITER $$
CREATE PROCEDURE VERPERSONAL(OUT RESULTADO VARCHAR(255))
BEGIN
SELECT * FROM PERSONAL;
END $$
DELIMITER ;
CALL VERPERSONAL(@RESULTADO);

/*ejercicio4*/


DROP TABLE IF EXISTS PRODUCTOS;

CREATE TABLE PRODUCTOS(

NOMBRE CHAR(25),
PRECIO DOUBLE
);


INSERT INTO PRODUCTOS VALUES("ESCOBA",50.25);
INSERT INTO PRODUCTOS VALUES("TORNILLOS",1.25);
INSERT INTO PRODUCTOS VALUES("TECLADOS",20.85);
INSERT INTO PRODUCTOS VALUES("TUERCAS",0.99);
INSERT INTO PRODUCTOS VALUES("FREGONA",10.75);

DROP PROCEDURE IF EXISTS VERPRECIO;
DELIMITER $$

CREATE PROCEDURE VERPRECIO(OUT RESULTADO2 CHAR(50))
BEGIN

SELECT * FROM PRODUCTOS WHERE PRECIO < 1.50;


END $$

DELIMITER ;

CALL VERPRECIO(@RESULTADO2);


/*ejercicio5*/


DROP PROCEDURE IF EXISTS VERPRECIO2;
DELIMITER $$

CREATE PROCEDURE VERPRECIO2(OUT RESULTADO3 CHAR(50))
BEGIN

SELECT * FROM PRODUCTOS WHERE PRECIO > 1.50;


END $$

DELIMITER ;

CALL VERPRECIO2(@RESULTADO3);

/*ejercicio6*/
ALTER TABLE PRODUCTOS ADD COLUMN CALIDAD CHAR(5);
DROP PROCEDURE IF EXISTS ESTRELLAS;
DELIMITER $$
CREATE PROCEDURE ESTRELLAS(IN NOMBRE2 CHAR(50), IN NUMERO INT)
BEGIN
    DECLARE VALOR1 CHAR(5);
    IF NUMERO = 1 THEN
        SET VALOR1 = "*";
    ELSEIF NUMERO = 2 THEN
        SET VALOR1 = "**";
    ELSEIF NUMERO = 3 THEN
        SET VALOR1 = "***";
    ELSEIF NUMERO = 4 THEN
        SET VALOR1 = "****";
    ELSEIF NUMERO = 5 THEN
        SET VALOR1 = "*****";
    ELSE
        SET VALOR1 = "NO SE HA INTRODUCIDO NINGÚN NÚMERO DEL 1-5";
    END IF;
    UPDATE PRODUCTOS SET CALIDAD = VALOR1 WHERE NOMBRE = NOMBRE2;
END $$
DELIMITER ;
CALL ESTRELLAS("TUERCAS",2);

/*ejercicio7*/

ALTER TABLE PRODUCTOS ADD COLUMN p_beneficio DECIMAL;
ALTER TABLE PRODUCTOS ADD COLUMN total_con_iva DECIMAL;




DROP PROCEDURE IF EXISTS CALCULAR_BENEFICIO_IVA;
DELIMITER $$

CREATE PROCEDURE CALCULAR_BENEFICIO_IVA()
BEGIN
    DECLARE COSTE DECIMAL(10, 2);
    DECLARE BENEFICIO DECIMAL(10, 2);
    DECLARE PVP DECIMAL(10, 2);
    DECLARE PRODUCTO_NOMBRE CHAR(50);
    DECLARE PRODUCTO_PRECIO DECIMAL(10, 2);

    -- Itera sobre los productos
    DECLARE done INT DEFAULT FALSE;
    DECLARE CURSOR_PRODUCTOS CURSOR FOR
        SELECT NOMBRE, PRECIO FROM productos;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    OPEN CURSOR_PRODUCTOS;

    read_loop: LOOP
        FETCH CURSOR_PRODUCTOS INTO PRODUCTO_NOMBRE, PRODUCTO_PRECIO;
        IF done THEN
            LEAVE read_loop;
        END IF;

        -- Calcula el beneficio según el precio
        IF PRODUCTO_PRECIO < 2 THEN
            SET BENEFICIO = PRODUCTO_PRECIO * 0.3;
        ELSEIF PRODUCTO_PRECIO > 20 THEN
            SET BENEFICIO = PRODUCTO_PRECIO * 0.15;
        ELSE
            SET BENEFICIO = PRODUCTO_PRECIO * 0.2;
        END IF;

        -- Calcula el PVP con IVA
        SET PVP = PRODUCTO_PRECIO + BENEFICIO + (PRODUCTO_PRECIO * 0.21);

        -- Actualiza la tabla productos
        UPDATE productos
        SET p_beneficio = BENEFICIO, total_con_iva = PVP
        WHERE NOMBRE = PRODUCTO_NOMBRE;
    END LOOP;

    CLOSE CURSOR_PRODUCTOS;
END $$

DELIMITER ;

CALL CALCULAR_BENEFICIO_IVA();

/*ejercicio8*/


DROP PROCEDURE IF EXISTS ORDENAR;

DELIMITER $$
CREATE PROCEDURE ORDENAR( INOUT  a1 INT, INOUT  a2 INT, INOUT  a3 INT, INOUT  a4 INT)
BEGIN

    DECLARE swapped INT;
    DECLARE temp INT;

    REPEAT
        SET swapped = 0;
        -- Compara y ordena los elementos adyacentes
        IF a1 < a2 THEN
            SET temp = a1;
            SET a1 = a2;
            SET a2 = temp;
            SET swapped = 1;
        END IF;

        IF a2 < a3 THEN
            SET temp = a2;
            SET a2 = a3;
            SET a3 = temp;
            SET swapped = 1;
        END IF;

        IF a3 < a4 THEN
            SET temp = a3;
            SET a3 = a4;
            SET a4 = temp;
            SET swapped = 1;
        END IF;
    UNTIL swapped = 0 END REPEAT;

END $$
DELIMITER ;
SET @a1 = 10586740;
SET @a2 = 7845; 
SET @a3 = 25648120;
SET @a4 = 16565;

CALL ORDENAR(@a1, @a2, @a3, @a4);

SELECT @a1, @a2, @a3, @a4;

/*ejercicio9*/

DROP PROCEDURE IF EXISTS SumaImpares;

DELIMITER $$

CREATE PROCEDURE SumaImpares(IN num1 INT, IN num2 INT, OUT suma INT)
BEGIN
    DECLARE temp INT;
    DECLARE i INT;

    -- Verifica si los números son iguales
    IF num1 = num2 THEN
        SET suma = NULL;
        SELECT 'Los números son iguales. No se puede calcular la suma.' AS Mensaje;
    ELSE
        -- Asegura que num1 sea menor que num2
        IF num1 > num2 THEN
            SET temp = num1;
            SET num1 = num2;
            SET num2 = temp;
        END IF;

        SET suma = 0;

        -- Calcula la suma de los números impares
        SET i = num1;
        WHILE i <= num2 DO
            IF i % 2 <> 0 THEN
                SET suma = suma + i;
            END IF;
            SET i = i + 1;
        END WHILE;

        SELECT suma AS SumaImpares;
    END IF;
END $$

DELIMITER ;
SET @resultado = 0;
CALL SumaImpares(1,10, @resultado);

/*ejercicio10*/

DROP PROCEDURE IF EXISTS CALCULAR_BENEFICIO_IVA2;
DELIMITER $$

CREATE PROCEDURE CALCULAR_BENEFICIO_IVA2()
BEGIN
    DECLARE COSTE DECIMAL(10, 2);
    DECLARE BENEFICIO DECIMAL(10, 2);
    DECLARE PVP DECIMAL(10, 2);
    DECLARE PRODUCTO_NOMBRE CHAR(50);
    DECLARE PRODUCTO_PRECIO DECIMAL(10, 2);

    -- Itera sobre los productos
    DECLARE done INT DEFAULT FALSE;
    DECLARE CURSOR_PRODUCTOS CURSOR FOR
        SELECT NOMBRE, PRECIO FROM productos;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    OPEN CURSOR_PRODUCTOS;

    read_loop: LOOP
        FETCH CURSOR_PRODUCTOS INTO PRODUCTO_NOMBRE, PRODUCTO_PRECIO;
        IF done THEN
            LEAVE read_loop;
        END IF;

        -- Calcula el beneficio según el precio
        IF PRODUCTO_PRECIO < 2 THEN
            SET BENEFICIO = PRODUCTO_PRECIO * 0.35;
        ELSEIF PRODUCTO_PRECIO > 20 THEN
            SET BENEFICIO = PRODUCTO_PRECIO * 0.15;
        ELSE
            SET BENEFICIO = PRODUCTO_PRECIO * 0.2;
        END IF;

        -- Calcula el PVP con IVA
        SET PVP = PRODUCTO_PRECIO + BENEFICIO + (PRODUCTO_PRECIO * 0.21);

        -- Actualiza la tabla productos
        UPDATE productos
        SET p_beneficio = BENEFICIO, total_con_iva = PVP
        WHERE NOMBRE = PRODUCTO_NOMBRE;
    END LOOP;

    CLOSE CURSOR_PRODUCTOS;
END $$

DELIMITER ;

CALL CALCULAR_BENEFICIO_IVA2();

/*ejercicio11*/

DROP PROCEDURE IF EXISTS primos;
DELIMITER $$
CREATE PROCEDURE primos(IN MAX INT)
BEGIN
    DECLARE i INT;
    DECLARE j INT;
    DECLARE esPrimo BOOLEAN;

    SET i = 2;

    WHILE i <= tope DO
        SET esPrimo = TRUE;
        SET j = 2;

        WHILE j <= i / 2 DO
            IF i % j = 0 THEN
                SET esPrimo = FALSE;
                LEAVE 	; 
            END IF ; 
            SET j = j + 1;
        END WHILE;

        IF esPrimo THEN
            SELECT i AS NumeroPrimo;
        END IF;

        SET i = i + 1;
    END WHILE;
END $$
DELIMITER ;


CALL MostrarNumerosPrimos(20);

